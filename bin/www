#!/usr/bin/env node

var port  = normalizePort(process.env.PORT || '3000')
, config  = require('../config')
, debug   = require('debug')('bounce:server')
, ioMongo = require('socket.io-adapter-mongo')
, http    = require('http')
, app     = require('../app')
, socketController = require('../controllers/socketController')
, server
, io
;

app.set('port', port);
server = http.createServer(app);
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/* socket.io init */
io = require('socket.io')(server);

io.adapter(ioMongo({
  host: config.socketAdapter.host,
  port: config.socketAdapter.port,
  db: config.socketAdapter.db
}));

io.on('connection', socketController.connection);

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error('Port ' + port + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error('Port ' + port + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  debug('Listening on port ' + server.address().port);
}
