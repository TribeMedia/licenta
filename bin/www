#!/usr/bin/env node

var port   = normalizePort(process.env.PORT || '3000')
// , sticky   = require('sticky-session')
, cpuCount = require('os').cpus().length
, cluster  = require('cluster')
, config   = require('../config')
, ioMongo  = require('socket.io-adapter-mongo')
, net     = require('net')
, app      = require('../app')
, socketController = require('../controllers/socketController')
;

app.set('port', port);


if (cluster.isMaster) {

  var workers = [];

  // Helper function for spawning worker at index 'i'.
  var spawn = function (i) {
    workers[i] = cluster.fork();

    // Optional: Restart worker on exit
    workers[i].on('exit', function (worker, code, signal) {
      console.log('respawning worker', i);
      spawn(i);
    });
  };

  // Spawn workers.
  for (var i = 0; i < cpuCount; i++) {
    spawn(i);
  }

  var worker_index = function (ip, len) {
    var s = 0;

    for (var i = 0, _len = ip.length; i < _len; i++) {
      if (parseInt(ip[i], 10)) {
        s += parseInt(ip[i], 10);
      }
    }
    return s % len;
  };

  // Create the outside facing server listening on our port.
  var server = net.createServer({ pauseOnConnect: true }, function (connection) {
    // We received a connection and need to pass it to the appropriate
    // worker. Get the worker for this connection's source IP and pass
    // it the connection.
    var worker = workers[worker_index(connection.remoteAddress, cpuCount)];
    worker.send('sticky-session:connection', connection);
  }).listen(port);
} else {
  var server = app.listen(0, 'localhost');
  var io = require('socket.io')(server);

  io.adapter(ioMongo({
    host: config.socketAdapter.host,
    port: config.socketAdapter.port,
    db: config.socketAdapter.db
  }));

  io.on('connection', socketController.connection);

  process.on('message', function(message, connection) {
    if (message !== 'sticky-session:connection') {
        return;
    }

    // Emulate a connection event on the server by emitting the
    // event with the connection the master sent us.
    server.emit('connection', connection);

    connection.resume();
  });
}


function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}